<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://menglingqing.github.io</id>
    <title>孟令卿</title>
    <updated>2019-09-28T02:40:04.385Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://menglingqing.github.io"/>
    <link rel="self" href="https://menglingqing.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://menglingqing.github.io/images/avatar.png</logo>
    <icon>https://menglingqing.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 孟令卿</rights>
    <entry>
        <title type="html"><![CDATA[Promise和Async/Await用法整理]]></title>
        <id>https://menglingqing.github.io/post/promise-he-asyncawait-yong-fa-zheng-li</id>
        <link href="https://menglingqing.github.io/post/promise-he-asyncawait-yong-fa-zheng-li">
        </link>
        <updated>2019-09-28T02:09:34.000Z</updated>
        <content type="html"><![CDATA[<h1 id="promise和asyncawait用法整理">Promise和Async/Await用法整理</h1>
<h2 id="1promise">1.Promise</h2>
<h3 id="1简介">1.简介</h3>
<p>Promise，简单来说就是一个容器，类似于我们人类的诺言（通常是一个异步操作的结果）</p>
<p>Promise对象的基本语法：</p>
<pre><code class="language-javascript">new Promise((resolve, reject) =&gt; {
  // ...
})
</code></pre>
<p>从语法上来说，Promise是一个对象，从它可以获取异步操作的消息。</p>
<p>基本语法：</p>
<pre><code class="language-javascript">let p = new Promise((resolve, reject) =&gt; {
  // ...
  resolve('success')
});
p.then(res =&gt; {
  console.log(res)
})
</code></pre>
<p>Promise对象特点和三个状态<br>
对象的状态不受外界影响<br>
一旦状态改变，就不会再变，状态会被凝固</p>
<p>Pending --value --&gt;Fulfilled<br>
--error--&gt;Rejected</p>
<p>例如：</p>
<pre><code class="language-javascript">let p = new Promise((resolve, reject) =&gt; {
  resolve('success');
  console.log('after resolve')
  reject('error')
})

p.then(res =&gt; {
  console.log(res)
})

p.catch(res =&gt; {
  console.log(res)
})

// after resolve
// success
</code></pre>
<p>resolve下面的语句其实是可以执行的，那么为什么reject的状态信息在下面没有接收到呢？这就是因为Promise对象的特点：状态的凝固。new 出一个Promise对象时，这个对象的起始状态局势Pending状态，在根据resolve或reject返回Fullfilled状态/Rejected状态。</p>
<h3 id="2then">2.then</h3>
<p>它的作用是为Promise实例添加状态改变时的回调函数，参数个数可以有两个<br>
1.then(func1, func2)<br>
2.then(func1)<br>
3.then(null, func2)</p>
<p>then分别接收resolve和reject的信息，有三种参数形式，第三种比较怪异，只用来接收做reject处理</p>
<p>例如：</p>
<pre><code class="language-javascript">let p = new Promise((resolve, reject) =&gt; {
  // ...
  let random = Math.random();
  if(random &gt; 0.5) resolve('random &gt; 0.5')
  else reject('random &lt; 0.5')
})

p.then(res =&gt; {
  console.log('resolve', res)
}, err =&gt; {
  console.log('reject', err)
})
</code></pre>
<h3 id="3链式调用">3.链式调用</h3>
<p>我们来执行一段代码：</p>
<pre><code class="language-javascript">let p = new Promise((resolve, reject) =&gt; {
  reject('reject')
})

let resultP = p.then(null, res =&gt; {
  console.log(res)
})

console.log(resultP)

// Promise { &lt;pending&gt; }
// reject
</code></pre>
<p>js的执行顺序就是这样，同步-&gt;异步-&gt;回调，在同步执行时，Promise对象还处于pending状态，也说明了这个then返回的是一个Promise对象。</p>
<p>而且必须在then里面给一个返回值，才能继续调用，否则undefined。</p>
<p>例如：</p>
<pre><code class="language-javascript">let p = new Promise((resolve, reject) =&gt; {
  reject('error')
})

let resultP = p.then(null, res =&gt; {
  console.log(res)
  return 123;
})
resultP.then(tmp = &gt; {
  console.log(tmp)
})

// 'error'
// 123
</code></pre>
<h3 id="4catch">4.catch</h3>
<p>Promise.prototype.catch 用于指定Promise状态变为rejected时的回调函数，可以被认为是then(null, func2)的简写形式</p>
<p>例如：</p>
<pre><code class="language-javascript">let p = new Promise((resolve, reject) =&gt; {
  reject('error')
})

p.catch(res =&gt; {
  console.log(res)
})
</code></pre>
<h3 id="5promiseresolve">5.Promise.resolve()</h3>
<p>Promise.resolve() 将现有对象转为Promise对象的快捷方式</p>
<p>传一个普通的对象：</p>
<pre><code class="language-javascript">let p1 = Promise.resolve({name: 'mlq', age: 18})

p1.then(res =&gt; {
  console.log(res)
})
</code></pre>
<p>如果是Promise对象呢，直接返回</p>
<pre><code class="language-javascript">let p = new Promise((resolve, reject) =&gt; {
  setTimeout(() =&gt; {
    resolve('success')
  }, 500)
})
let pp = Promise.resolve(p)
pp.then(res =&gt; {
  console.log(res)
})
console.log(pp == p)

// true
// success
</code></pre>
<h3 id="6promisereject">6.Promise.reject()</h3>
<p>Promise.reject() 快速获取一个拒绝状态的Promise对象</p>
<pre><code class="language-javascript">let p = Promise.reject(123)
console.log(p)
p.then(res =&gt; {
  console.log(res)
}).catch(res =&gt; {
  console.log('catch', res)
})

// Promise{ &lt;rejected&gt; 123 }
// catch 123
</code></pre>
<h3 id="7promiseall">7.Promise.all()</h3>
<p>Promise.all()用于将多个Promise实例，包装成一个新的Promise实例。</p>
<p>成功和返回的数据类型是不相同的</p>
<pre><code class="language-javascript">let p1 = Promise.resolve(123)
let p2 = Promise.resolve('hello')
let p3 = Promise.resolve('success')
Promise.all([p1, p2, p3]).then(res =&gt; {
  console.log(res)
})

// [132, 'hello', 'success']
</code></pre>
<p>成功之后就是数组类型，当所有状态都是成功状态才返回数组，只要其中有一个的对象是reject的，就返回reject的状态值</p>
<pre><code class="language-javascript">let p1 = Promise.resolve(123)
let p2 = Promise.resolve('hello')
let p3 = Promise.resolve('success')
let p4 = Promise.reject('Err')

Promise.all([p1, p2, p3, p4]).then(res =&gt; {
  console.log(res)
}).catch(res =&gt; {
  console.log(res)
})

// Err
</code></pre>
<h3 id="8promiserace">8.Promise.race()</h3>
<p>和all同样接收多个对象，不同的是，race()接收的对象中，哪个对象返回的快就返回哪个对象，就如race字面意思（赛跑）一样。如果对象中有reject状态，必须catch捕捉到，如果返回的够快，就返回这个状态。race最终返回的只有一个值。</p>
<p>例如：</p>
<pre><code class="language-javascript">sleep(wait){
  return new Promise((res, rej) =&gt; {
    setTimeout(() =&gt; {
      res(wait)
    },wait)
  })
}

let p1 = sleep(500)
let p2 = sleep(2000)

Promise.race([p1, p2]).then(res =&gt; {
  console.log(res)
})

let pr = new Promise((res, rej) =&gt; {
  setTimeout(() =&gt; {
    reject('err')
  }, 1000)
})

Promise.race([p2, pr]).then(res =&gt; {
  console.log(res)
}).catch(res =&gt; {
  console.log(res)
})

// 500
// err
</code></pre>
<h3 id="9异常处理">9.异常处理</h3>
<p>当Promise被明确拒绝时，会发生拒绝；但是如果是在构造函数回调中引发的错误，则会隐式拒绝。Promise内部的错误外界用try-catch捕捉不到</p>
<pre><code class="language-javascript">try {
  let p = new Promise((res, rej) =&gt; {
    throw new Error('err')
  })
} catch(e){
  console.log('catch', e)
}

//
</code></pre>
<p>结果什么都没有打印出来</p>
<p>但是抛出的错误可以通过catch捕捉</p>
<p>还是上面👆那个例子</p>
<pre><code class="language-javascript">let p = new Promise((res, rej) =&gt; {
  throw new Error('err')
})
p.catch(res =&gt; {
  console.log(res)
})

// err
</code></pre>
<p>在 Promise 的链的尾部必须要有个catch接着</p>
<h2 id="2async-await">2.Async-Await</h2>
<h3 id="1-简介">1. 简介：</h3>
<p>Async-Await</p>
<p>异步编程的最高境界，就是根本不用关心它是异步的</p>
<p>Async-Await与Promise的关系</p>
<p>不存在谁替代谁，因为async-await是寄生于promise。generator的语法糖</p>
<h3 id="2基本语法">2.基本语法</h3>
<pre><code class="language-javascript">async demo(params){}
demo()

// async函数返回的是一个Promise对象
</code></pre>
<h3 id="3-规则">3. 规则</h3>
<ol>
<li>async表示这是一个异步函数，await只能用在这个函数里</li>
<li>await表示在这里等待promise返回结果后，再继续执行。</li>
<li>await后面跟着的应该是一个promise对象（当然，其他返回值也没有关系，只是会立即执行，不过那样就没有意义了）</li>
</ol>
<p>await必须出现在async函数内部，不能单独使用</p>
<p>await等待的虽然是promise对象，但不必写.then()，直接可以得到返回值</p>
<h3 id="4应用">4.应用</h3>
<pre><code class="language-javascript">async demo(){
  let res1 = await sleep(100)
  let res2 = await sleep(res1 + 100)
  let res3 = await sleep(res2 + 100)
  return res3
}

demo().then(res =&gt; {
  console.log(res)
})

// 300
</code></pre>
<h3 id="5错误处理">5.错误处理</h3>
<p>.then()不用写了，.catch()也可以不用写，可以直接用标准的try，catch语法捕捉错误</p>
<p>如果是reject状态，可以用try-catch捕捉</p>
<p>例如：</p>
<pre><code class="language-javascript">let p = new Promise((res, reject) =&gt; {
  setTimeout(() =&gt; {
    reject('err')
  }, 100)
})

async demo (params) {
  try {
    let res = await p
  } catch(e) {
    console.log(e)
  }
}

demo();

// err
</code></pre>
<p>这是基本的错误处理，但是当内部出现一些错误时，和上面Promise有点类似，demo()函数不会报错，还是需要catch回调捕捉。这就是内部的错误被“静默”处理了。</p>
<pre><code class="language-javascript">let p = new Promise((res,rej) =&gt; {
  setTimeout(() =&gt; {
    reject('err')
  }, 100)
});

async demo(params) {
  let res = name
}
demo().catch(err =&gt; {
  console.log(err)
})
</code></pre>
<h3 id="6注意并行执行和循环">6.注意并行执行和循环</h3>
<p>比如上面👆的例子</p>
<pre><code class="language-javascript">async demo(){
  let res1 = await sleep(100)
  let res2 = await sleep(res1 + 100)
  let res3 = await sleep(res2 + 100)
  return res3
}

demo().then(res =&gt; {
  console.log(res)
})
</code></pre>
<p>如果这三个是你想异步发出的Ajax请求，在这段代码里面其实是同步的，第一个发出去才会发第二个，所以async/await需要谨慎使用</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://menglingqing.github.io/post/hello-gridea</id>
        <link href="https://menglingqing.github.io/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>